name: SonarCloud

on:
  push:
    branches: [ ui-streamlit, music-reco, main ]   # ← ajoute ici tes branches
    paths: [ 'backend/**', 'ui/**', 'sonar-project.properties', '.github/workflows/**' ]
  pull_request:
    branches: [ ui-streamlit, music-reco, main ]
    paths: [ 'backend/**', 'ui/**', 'sonar-project.properties', '.github/workflows/**' ]

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write   # pour décorer les PR avec les résultats Sonar

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # important pour l'analyse des branches/PR

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps + test tools
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov

      - name: Run tests (backend) + coverage
        run: |
          cd backend
          # Si tu n'as pas encore de tests, on évite l'échec tout en produisant un coverage minimal
          pytest -q --maxfail=1 --disable-warnings --cov=src --cov=api --cov-report=xml:coverage.xml || echo "no tests yet"

      # Lancement de l'analyse SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # (Optionnel) attendre le Quality Gate dans les PR
      - name: SonarCloud Quality Gate
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
